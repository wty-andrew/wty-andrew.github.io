"use strict";(self.webpackChunkwty_blog=self.webpackChunkwty_blog||[]).push([[702],{543:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>g,default:()=>b,frontMatter:()=>p,metadata:()=>u,toc:()=>k});var s=o(7462),t=o(7294),a=o(3905),r=o(3012);const l=r.ZP.div`
  background-color: rgba(var(--ifm-color-primary-rgb), 0.2);
  color: var(--ifm-color-primary);
  opacity: 99%;
  margin-top: calc(-1 * var(--ifm-leading) - var(--ifm-global-radius));
  margin-bottom: var(--ifm-leading);
  padding-top: calc(var(--ifm-pre-padding) / 3);
  padding-bottom: calc(var(--ifm-pre-padding) / 3);
  padding-right: var(--ifm-pre-padding);
  padding-left: var(--ifm-pre-padding);
  border-bottom-right-radius: var(--ifm-global-radius);
  border-bottom-left-radius: var(--ifm-global-radius);
  pointer-events: none;
`,i=r.ZP.div`
  text-align: right;
  cursor: pointer;
  user-select: none;
  pointer-events: auto;
`,d=r.ZP.div`
  padding-top: calc(var(--ifm-pre-padding) / 3);
  padding-bottom: calc(var(--ifm-pre-padding) / 3);
  border-top: 1px solid var(--ifm-color-primary);
  pointer-events: auto;

  & > :last-child {
    margin-bottom: 0;
  }
`,m=e=>{let{children:n,defaultOpen:o=!1,showText:s="More",hideText:a="Hide"}=e;const[r,m]=(0,t.useState)(o),[p,...g]=t.Children.toArray(n);return t.createElement(t.Fragment,null,p,g&&t.createElement(t.Fragment,null,t.createElement(l,null,t.createElement(i,{onClick:()=>m((e=>!e))},r?a:s),r&&t.createElement(d,null,g))))},p={id:"roslisp-usage",title:"Roslisp Usage"},g=void 0,u={unversionedId:"ros/roslisp-usage",id:"ros/roslisp-usage",title:"Roslisp Usage",description:"Supplement to roslisp wiki",source:"@site/notes/ros/roslisp-usage.mdx",sourceDirName:"ros",slug:"/ros/roslisp-usage",permalink:"/ros/roslisp-usage",draft:!1,tags:[],version:"current",frontMatter:{id:"roslisp-usage",title:"Roslisp Usage"},sidebar:"tutorialSidebar",previous:{title:"ROS",permalink:"/category/ros"},next:{title:"Environment Setup",permalink:"/category/environment-setup"}},c={},k=[{value:"Manage Node",id:"manage-node",level:2},{value:"<code>start-ros-node</code>",id:"start-ros-node",level:3},{value:"<code>shutdown-ros-node</code>",id:"shutdown-ros-node",level:3},{value:"<code>with-ros-node</code>",id:"with-ros-node",level:3},{value:"<code>node-status</code>",id:"node-status",level:3},{value:"Messages",id:"messages",level:2},{value:"<code>make-message</code>",id:"make-message",level:3},{value:"<code>symbol-codes</code>",id:"symbol-codes",level:3},{value:"<code>symbol-code</code>",id:"symbol-code",level:3},{value:"<code>code-symbols</code>",id:"code-symbols",level:3},{value:"<code>code-symbol</code>",id:"code-symbol",level:3},{value:"Time",id:"time",level:2},{value:"<code>ros-time</code>",id:"ros-time",level:3},{value:"Logging",id:"logging",level:2},{value:"<code>ros-info</code>",id:"ros-info",level:3}],v={toc:k},h="wrapper";function b(e){let{components:n,...o}=e;return(0,a.kt)(h,(0,s.Z)({},v,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Supplement to ",(0,a.kt)("a",{parentName:"p",href:"http://wiki.ros.org/roslisp/Overview"},"roslisp wiki")),(0,a.kt)("h2",{id:"manage-node"},"Manage Node"),(0,a.kt)("h3",{id:"start-ros-node"},(0,a.kt)("inlineCode",{parentName:"h3"},"start-ros-node")),(0,a.kt)(m,{mdxType:"Snippet"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},'(start-ros-node "node_name")\n')),(0,a.kt)("p",null,"After the node starts, ",(0,a.kt)("inlineCode",{parentName:"p"},"*node-status*")," will be set to ",(0,a.kt)("inlineCode",{parentName:"p"},":running"))),(0,a.kt)("h3",{id:"shutdown-ros-node"},(0,a.kt)("inlineCode",{parentName:"h3"},"shutdown-ros-node")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},"(shutdown-ros-node)\n")),(0,a.kt)("h3",{id:"with-ros-node"},(0,a.kt)("inlineCode",{parentName:"h3"},"with-ros-node")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},'(with-ros-node ("node_name")\n  (...))\n\n;; for long running task/service, use:\n(with-ros-node ("node_name" :spin t)\n  (...))\n')),(0,a.kt)("h3",{id:"node-status"},(0,a.kt)("inlineCode",{parentName:"h3"},"node-status")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},"(node-status)\n;; returns either :running or :shutdown\n")),(0,a.kt)("h2",{id:"messages"},"Messages"),(0,a.kt)("h3",{id:"make-message"},(0,a.kt)("inlineCode",{parentName:"h3"},"make-message")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},';; use symbol as msg-type\n(make-message \'std_msgs-msg:String\n              :data "Hello World")\n\n;; use string as msg-type\n(make-message "std_msgs/String"\n              :data "Hello World")\n\n;; fill in nested fields\n(make-message "geometry_msgs/PoseStamped"\n              :header (make-message "std_msgs/Header"\n                                    :frame_id "map")\n              (:w :orientation :pose) 1.0)\n')),(0,a.kt)("h3",{id:"symbol-codes"},(0,a.kt)("inlineCode",{parentName:"h3"},"symbol-codes")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},';; use symbol as msg-type\n(symbol-codes \'sensor_msgs-msg:Range)\n\n;; use instance as msg-type\n(symbol-codes (make-message "sensor_msgs/Range"))\n\n;; returns: ((:ULTRASOUND . 0) (:INFRARED . 1))\n')),(0,a.kt)("h3",{id:"symbol-code"},(0,a.kt)("inlineCode",{parentName:"h3"},"symbol-code")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},"(symbol-code 'sensor_msgs-msg:Range :ultrasound)\n;; returns: 0\n")),(0,a.kt)("h3",{id:"code-symbols"},(0,a.kt)("inlineCode",{parentName:"h3"},"code-symbols")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},"(code-symbols 'visualization_msgs-msg:Marker 0)\n;; returns: ((:ARROW . 0) (:ADD . 0) (:MODIFY . 0))\n")),(0,a.kt)("h3",{id:"code-symbol"},(0,a.kt)("inlineCode",{parentName:"h3"},"code-symbol")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},"(code-symbol 'visualization_msgs-msg:Marker 0)\n;; returns: :ARROW (first found)\n")),(0,a.kt)("h2",{id:"time"},"Time"),(0,a.kt)("h3",{id:"ros-time"},(0,a.kt)("inlineCode",{parentName:"h3"},"ros-time")),(0,a.kt)(m,{mdxType:"Snippet"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},"(ros-time)\n;; returns the number of seconds since January 1st, 1970\n")),(0,a.kt)("p",null,"It uses ",(0,a.kt)("inlineCode",{parentName:"p"},"sb-ext:get-time-of-day")," under the hood")),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("h3",{id:"ros-info"},(0,a.kt)("inlineCode",{parentName:"h3"},"ros-info")),(0,a.kt)(m,{mdxType:"Snippet"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lisp"},'(ros-info (foo bar) "Hello, ~A" "World")\n;; outputs: [(FOO BAR) INFO] 1625730154.129: Hello, World\n\n(ros-info (monitor) (< battery-level 20) "Battery Low")\n;; The second argument can be a condition, works like `ROS_INFO_COND` in roscpp\n')),(0,a.kt)("p",null,"The same for ",(0,a.kt)("inlineCode",{parentName:"p"},"ros-debug"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ros-warn"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ros-error"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"ros-fatal"))))}b.isMDXComponent=!0}}]);