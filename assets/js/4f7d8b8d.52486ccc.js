"use strict";(self.webpackChunkwty_blog=self.webpackChunkwty_blog||[]).push([[702],{8958:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>p,contentTitle:()=>g,default:()=>j,frontMatter:()=>m,metadata:()=>h,toc:()=>u});var o=n(1527),r=n(7793),d=n(959),i=n(1761);const l=i.ZP.div`
  background-color: rgba(var(--ifm-color-primary-rgb), 0.2);
  color: var(--ifm-color-primary);
  opacity: 99%;
  margin-top: calc(-1 * var(--ifm-leading) - var(--ifm-global-radius));
  margin-bottom: var(--ifm-leading);
  padding-top: calc(var(--ifm-pre-padding) / 3);
  padding-bottom: calc(var(--ifm-pre-padding) / 3);
  padding-right: var(--ifm-pre-padding);
  padding-left: var(--ifm-pre-padding);
  border-bottom-right-radius: var(--ifm-global-radius);
  border-bottom-left-radius: var(--ifm-global-radius);
  pointer-events: none;
`,a=i.ZP.div`
  text-align: right;
  cursor: pointer;
  user-select: none;
  pointer-events: auto;
`,c=i.ZP.div`
  padding-top: calc(var(--ifm-pre-padding) / 3);
  padding-bottom: calc(var(--ifm-pre-padding) / 3);
  border-top: 1px solid var(--ifm-color-primary);
  pointer-events: auto;

  & > :last-child {
    margin-bottom: 0;
  }
`,t=e=>{let{children:s,defaultOpen:n=!1,showText:r="More",hideText:i="Hide"}=e;const[t,m]=(0,d.useState)(n),[g,...h]=d.Children.toArray(s);return(0,o.jsxs)(o.Fragment,{children:[g,h&&(0,o.jsxs)(l,{children:[(0,o.jsx)(a,{onClick:()=>m((e=>!e)),children:t?i:r}),t&&(0,o.jsx)(c,{children:h})]})]})},m={id:"roslisp-usage",title:"Roslisp Usage"},g=void 0,h={id:"ros/roslisp-usage",title:"Roslisp Usage",description:"Supplement to roslisp wiki",source:"@site/notes/ros/roslisp-usage.mdx",sourceDirName:"ros",slug:"/ros/roslisp-usage",permalink:"/ros/roslisp-usage",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"roslisp-usage",title:"Roslisp Usage"},sidebar:"tutorialSidebar",previous:{title:"ROS",permalink:"/category/ros"},next:{title:"Environment Setup",permalink:"/category/environment-setup"}},p={},u=[{value:"Manage Node",id:"manage-node",level:2},{value:"<code>start-ros-node</code>",id:"start-ros-node",level:3},{value:"<code>shutdown-ros-node</code>",id:"shutdown-ros-node",level:3},{value:"<code>with-ros-node</code>",id:"with-ros-node",level:3},{value:"<code>node-status</code>",id:"node-status",level:3},{value:"Messages",id:"messages",level:2},{value:"<code>make-message</code>",id:"make-message",level:3},{value:"<code>symbol-codes</code>",id:"symbol-codes",level:3},{value:"<code>symbol-code</code>",id:"symbol-code",level:3},{value:"<code>code-symbols</code>",id:"code-symbols",level:3},{value:"<code>code-symbol</code>",id:"code-symbol",level:3},{value:"Time",id:"time",level:2},{value:"<code>ros-time</code>",id:"ros-time",level:3},{value:"Logging",id:"logging",level:2},{value:"<code>ros-info</code>",id:"ros-info",level:3}];function x(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:["Supplement to ",(0,o.jsx)(s.a,{href:"http://wiki.ros.org/roslisp/Overview",children:"roslisp wiki"})]}),"\n",(0,o.jsx)(s.h2,{id:"manage-node",children:"Manage Node"}),"\n",(0,o.jsx)(s.h3,{id:"start-ros-node",children:(0,o.jsx)(s.code,{children:"start-ros-node"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:'(start-ros-node "node_name")\n'})}),(0,o.jsxs)(s.p,{children:["After the node starts, ",(0,o.jsx)(s.code,{children:"*node-status*"})," will be set to ",(0,o.jsx)(s.code,{children:":running"})]})]}),"\n",(0,o.jsx)(s.h3,{id:"shutdown-ros-node",children:(0,o.jsx)(s.code,{children:"shutdown-ros-node"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:"(shutdown-ros-node)\n"})}),"\n",(0,o.jsx)(s.h3,{id:"with-ros-node",children:(0,o.jsx)(s.code,{children:"with-ros-node"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:'(with-ros-node ("node_name")\n  (...))\n\n;; for long running task/service, use:\n(with-ros-node ("node_name" :spin t)\n  (...))\n'})}),"\n",(0,o.jsx)(s.h3,{id:"node-status",children:(0,o.jsx)(s.code,{children:"node-status"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:"(node-status)\n;; returns either :running or :shutdown\n"})}),"\n",(0,o.jsx)(s.h2,{id:"messages",children:"Messages"}),"\n",(0,o.jsx)(s.h3,{id:"make-message",children:(0,o.jsx)(s.code,{children:"make-message"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:';; use symbol as msg-type\n(make-message \'std_msgs-msg:String\n              :data "Hello World")\n\n;; use string as msg-type\n(make-message "std_msgs/String"\n              :data "Hello World")\n\n;; fill in nested fields\n(make-message "geometry_msgs/PoseStamped"\n              :header (make-message "std_msgs/Header"\n                                    :frame_id "map")\n              (:w :orientation :pose) 1.0)\n'})}),"\n",(0,o.jsx)(s.h3,{id:"symbol-codes",children:(0,o.jsx)(s.code,{children:"symbol-codes"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:';; use symbol as msg-type\n(symbol-codes \'sensor_msgs-msg:Range)\n\n;; use instance as msg-type\n(symbol-codes (make-message "sensor_msgs/Range"))\n\n;; returns: ((:ULTRASOUND . 0) (:INFRARED . 1))\n'})}),"\n",(0,o.jsx)(s.h3,{id:"symbol-code",children:(0,o.jsx)(s.code,{children:"symbol-code"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:"(symbol-code 'sensor_msgs-msg:Range :ultrasound)\n;; returns: 0\n"})}),"\n",(0,o.jsx)(s.h3,{id:"code-symbols",children:(0,o.jsx)(s.code,{children:"code-symbols"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:"(code-symbols 'visualization_msgs-msg:Marker 0)\n;; returns: ((:ARROW . 0) (:ADD . 0) (:MODIFY . 0))\n"})}),"\n",(0,o.jsx)(s.h3,{id:"code-symbol",children:(0,o.jsx)(s.code,{children:"code-symbol"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:"(code-symbol 'visualization_msgs-msg:Marker 0)\n;; returns: :ARROW (first found)\n"})}),"\n",(0,o.jsx)(s.h2,{id:"time",children:"Time"}),"\n",(0,o.jsx)(s.h3,{id:"ros-time",children:(0,o.jsx)(s.code,{children:"ros-time"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:"(ros-time)\n;; returns the number of seconds since January 1st, 1970\n"})}),(0,o.jsxs)(s.p,{children:["It uses ",(0,o.jsx)(s.code,{children:"sb-ext:get-time-of-day"})," under the hood"]})]}),"\n",(0,o.jsx)(s.h2,{id:"logging",children:"Logging"}),"\n",(0,o.jsx)(s.h3,{id:"ros-info",children:(0,o.jsx)(s.code,{children:"ros-info"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lisp",children:'(ros-info (foo bar) "Hello, ~A" "World")\n;; outputs: [(FOO BAR) INFO] 1625730154.129: Hello, World\n\n(ros-info (monitor) (< battery-level 20) "Battery Low")\n;; The second argument can be a condition, works like `ROS_INFO_COND` in roscpp\n'})}),(0,o.jsxs)(s.p,{children:["The same for ",(0,o.jsx)(s.code,{children:"ros-debug"}),", ",(0,o.jsx)(s.code,{children:"ros-warn"}),", ",(0,o.jsx)(s.code,{children:"ros-error"}),", and ",(0,o.jsx)(s.code,{children:"ros-fatal"})]})]})]})}function j(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}}}]);